/*	File:		MoreSCFHelpers.c	Contains:	High-level System Configuration framework operations.	Written by:	Quinn	Copyright:	Copyright (c) 2001 by Apple Computer, Inc., All Rights Reserved.	Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.				("Apple") in consideration of your agreement to the following terms, and your				use, installation, modification or redistribution of this Apple software				constitutes acceptance of these terms.  If you do not agree with these terms,				please do not use, install, modify or redistribute this Apple software.				In consideration of your agreement to abide by the following terms, and subject				to these terms, Apple grants you a personal, non-exclusive license, under Apple’s				copyrights in this original Apple software (the "Apple Software"), to use,				reproduce, modify and redistribute the Apple Software, with or without				modifications, in source and/or binary forms; provided that if you redistribute				the Apple Software in its entirety and without modifications, you must retain				this notice and the following text and disclaimers in all such redistributions of				the Apple Software.  Neither the name, trademarks, service marks or logos of				Apple Computer, Inc. may be used to endorse or promote products derived from the				Apple Software without specific prior written permission from Apple.  Except as				expressly stated in this notice, no other rights or licenses, express or implied,				are granted by Apple herein, including but not limited to any patent rights that				may be infringed by your derivative works or by other works in which the Apple				Software may be incorporated.				The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO				WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED				WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR				PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN				COMBINATION WITH YOUR PRODUCTS.				IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR				CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE				GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)				ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION				OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT				(INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN				ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.	Change History (most recent first):$Log: MoreSCFHelpers.h,v $Revision 1.1  2002/01/16 22:52:34  eskimo1First checked in.*/#pragma once/////////////////////////////////////////////////////////////////// MoreIsBetter Setup#include "MoreSetup.h"// MIB Prototypes#include "MoreSCFDigest.h"// System prototypes#include <CoreFoundation/CoreFoundation.h>/////////////////////////////////////////////////////////////////#ifdef __cplusplusextern "C" {#endif/////////////////////////////////////////////////////////////////// TCP/IP Will Dial// You no longer need a helper function to ask the "will this connection // dial the modem" question.  System Configuration framework provides // high-level APIs to answer this question, to wit://// SCNetworkCheckReachabilityByAddress// SCNetworkCheckReachabilityByName/////////////////////////////////////////////////////////////////// AppleTalk On/Off// Note that you can't really save and restore the state of AppleTalk // using these routines because AppleTalk could be enabled on one, but // not all, of the AppleTalk capable interfaces.  I need to introduce // new routines that return an array of Booleans.extern pascal OSStatus MoreSCIsAppleTalkActive(CFStringRef setID, Boolean *active);	// Sets *active to true if the AppleTalk stack is active 	// on any active interface in the set denoted by setID	// (pass nil to work on the current set).  This tests the 	// configured value in the preferences, not the current state 	// (AppleTalk might be configured active but inactive 	// because, say, the Ethernet cable isn't connected).extern pascal OSStatus MoreSCSetAppleTalkActive(CFStringRef setID, Boolean active);	// Sets the active state of the AppleTalk stack to the active	// parameter on each interface capable of AppleTalk in the set 	// denoted by setID (pass nil to work on the current set)./////////////////////////////////////////////////////////////////// DHCP Releaseextern pascal OSStatus MoreSCCreateActiveDHCPServicesArray(CFArrayRef *activeDHCP);	// Creates a CFArray of active DHCP service IDs.  Each element is 	// the name of a service that contains an IPv4 entity configured 	// to use DHCP.  Typically these are really boring names, like "3".	//	// activeDHCP must not be nil.	// On input, *activeDHCP must be nil.	// On error, *activeDHCP will be nil.	// On success, *activeDHCP will be a CFArrayRef. You must release it.	// •more testing needed	extern pascal OSStatus MoreSCDHCPRelease(CFStringRef serviceID);	// Forces a DHCP release on the IPv4 entity inside the service 	// denoted by serviceID.  serviceID is typically one of the 	// elements of the array returned by the previous API.	// serviceID is assumed to be within the current set because 	// it doesn't make sense to force a release on an interface 	// that's not active.	// •more testing needed/////////////////////////////////////////////////////////////////// Super High-Level APIs for Internet Setup Assistantsextern pascal OSStatus MoreSCFindSetByUserVisibleNameAndCopyID(CFStringRef userVisibleName, CFStringRef *setID);	// Searches the list of sets for one with the specified user 	// visible name.  ISP software typically creates a set with 	// a well known name.  This routine allows them to quickly 	// determine if their set already exists.	// 	// userVisibleName must not be nil.	// setID must not be nil.	// On input, *setID must be nil.	// On error, *setID is always nil.	// On succces, *setID is set to nil if no name is found or 	// to the name of the found set.  If *setID is not nil you 	// must release it.extern pascal OSStatus MoreSCMakeNewDialupSet(									CFStringRef					bsdName, 									CFStringRef					userVisibleName, 									const MoreSCModemDigest *	modemSettings, 									const MoreSCPPPDigest * 	pppSettings, 									const MoreSCIPv4Digest *	ipv4Settings,									const MoreSCDNSDigest *		dnsSettings,									CFStringRef *				newSetID);	// Creates a new dialup set and configures it appropriately.	// 	// Pass nil to bsdName to use first modem port; alternatively 	// pass the name of the modem port you want the set to reference.	// You can get this name from the kMoreSCPSPropertyDevice property 	// of the list of ports returned by MoreSCCreatePortArray.	//	// You must not pass nil to userVisibleName.  This is the user-visible 	// name of the newly created set.	//	// You can pass nil to modemSettings, in which case default settings 	// (kMoreSCModemDigestDefault) are used (except for the modem script 	// which is set to a useful default).	//	// You can't pass nil to pppSettings.  You should at least fill out 	// the active, authName, and commRemoteAddress fields.  You probably 	// also want to fill out the authPassword field (in plain text).	//	// Pass nil to ipv4Settings to get default.  Typically this is just 	// fine for a PPP setup.	//	// Pass nil to dnsSettings to get default.  Typically this is what 	// you want to do unless your PPP server doesn't support RFC 1877, 	// in which case you'll need to fill out the serverAddressesCount and 	// serverAddresses fields.	//	// Pass nil to setID if you don't care what set was created.  Otherwise,	// on input, *setID must be nil. On error, *setID is always nil (and 	// no set is created). On success, *setID is the set ID of the newly 	// created set, which you must release.	//	// This routine does not activate the newly created set.  If you 	// want to do this pass the returned setID to MoreSCSetCurrentSet.	/////////////////////////////////////////////////////////////////#ifdef __cplusplus}#endif